import 'dart:developer';

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_svg/svg.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:quikhyr_worker/common/quik_asset_constants.dart';
import 'package:quikhyr_worker/common/quik_routes.dart';
import 'package:quikhyr_worker/common/widgets/longIconButton.dart';
import 'package:quikhyr_worker/features/auth/presentation/components/my_text_field.dart';
import 'package:quikhyr_worker/models/location_model.dart';
import 'package:quikhyr_worker/models/worker_model.dart';
import '../../blocs/sign_up_bloc/sign_up_bloc.dart';

class SignUpScreen extends StatefulWidget {
  const SignUpScreen({Key? key}) : super(key: key);

  @override
  State<SignUpScreen> createState() => _SignUpScreenState();
}

class _SignUpScreenState extends State<SignUpScreen> {
  final PageController pageController = PageController();
  // int _curr = 0;
  final TextEditingController _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (pageController.page!.toInt() == 0) {
          bool shouldClose = await showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('Confirmation'),
                  content:
                      const Text('Are you sure you want to close the app?'),
                  actions: [
                    TextButton(
                      onPressed: () => GoRouter.of(context).pop(false),
                      child: const Text('No'),
                    ),
                    TextButton(
                      onPressed: () => GoRouter.of(context).pop(true),
                      child: const Text('Yes'),
                    ),
                  ],
                ),
              ) ??
              false;
          return shouldClose;
        } else {
          pageController.previousPage(
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeIn);
          return Future.value(false);
        }
      },
      child: Scaffold(
        body: BlocListener<SignUpBloc, SignUpState>(
          listener: (context, state) {
            if (state is SignUpFailure) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(state.message),
                ),
              );
              
              pageController.animateToPage(0, duration: const Duration(milliseconds: 300), curve: Curves.easeIn);
            }
            if (state is SignUpSuccessWithWorker) {
              context.pushNamed(QuikRoutes.registrationName);
            }
          },
          child: PageView(
            physics: const NeverScrollableScrollPhysics(),
            controller: pageController,
            children: [
              buildSignUp(),
              buildSetPassword(),
            ],
            // onPageChanged: (num) {
            //   setState(() {
            //     _curr = num;
            //   });
            // },
          ),
        ),
      ),
    );
  }

  final GlobalKey<FormState> _signUpFormKey = GlobalKey<FormState>();
  final GlobalKey<FormState> _setPasswordFormKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _nameController = TextEditingController();
  final _phoneController = TextEditingController();

  

  Pages buildSetPassword() {
    TextEditingController confirmPasswordController = TextEditingController();
    return Pages(
      formKey: _setPasswordFormKey,
      pageController: pageController,
      onButtonPressed: () {
                if (_setPasswordFormKey.currentState!.validate()) {
          WorkerModel user = WorkerModel(
            id: '', // This will be generated by Firebase
            email: _emailController.text.trim(),
            name: _nameController.text.trim(),
            phone: _phoneController.text.trim(),
            gender: "Male",
            age: 99,
            available: false,
            location: LocationModel(
              latitude: 10.353987,
              longitude: 76.210751,
            ),
            pincode: "680680",
            fcmToken: "testWorker1fcmToken",
            isVerified: false,
            isActive: false,
            subserviceIds: const ["rcDOmxSMHmeOByqZzIZP"],
            serviceIds: const ["nnC5VNxDoGcV1DOBeAz5"],
          );
          context.read<SignUpBloc>().add(
              SignUpRequired(worker: user, password: _passwordController.text));
          
        }
      },
      color: Colors.red.shade100,
      buttonText: "Profile Info",
      children: [
        const SizedBox(
          height: 64.0,
        ),
        const Align(
          alignment: Alignment.centerLeft,
          child: Text("Set Password",
              style: TextStyle(
                color: Color(0xFFE9EAEC),
                fontFamily: 'Trap',
                fontSize: 24,
                fontStyle: FontStyle.normal,
                fontWeight: FontWeight.w600,
              )),
        ),
        const SizedBox(
          height: 24.0,
        ),
        MyTextField(
          controller: _passwordController,
          hintText: "Enter password*",
          obscureText: true,
          keyboardType: TextInputType.text,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter your password';
            }
            return null;
          },
        ),
        const SizedBox(
          height: 12.0,
        ),
        MyTextField(
          controller: confirmPasswordController,
          hintText: "Confirm password*",
          obscureText: true,
          keyboardType: TextInputType.text,
          validator: (value) {
            if (value != _passwordController.text) {
              return 'Passwords do not match';
            }
            return null;
          },
        ),
      ],
    );
  }

  Pages buildSignUp() {
    return Pages(
      formKey: _signUpFormKey,
      pageController: pageController, // Added pageController here
      onButtonPressed: () {
        if (_signUpFormKey.currentState!.validate()) {
          // Navigate to the next page
          pageController.animateToPage(1,
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeIn);
        }
      },
      color: Colors.teal,
      buttonText: "Set Password",
      children: [
        const SizedBox(
          height: 32.0,
        ),
        const Align(
          alignment: Alignment.centerLeft,
          child: Text(
            "Name",
            style: TextStyle(
              color: Color(0xFFE9EAEC),
              fontFamily: 'Trap',
              fontSize: 20,
              fontWeight: FontWeight.w800,
              height: 1,
            ),
          ),
        ),
        const SizedBox(
          height: 12.0,
        ),
        MyTextField(
          controller: _nameController,
          hintText: "Enter name*",
          obscureText: false,
          keyboardType: TextInputType.text,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter your name';
            }
            return null;
          },
        ),
        const SizedBox(
          height: 24.0,
        ),
        const Align(
          alignment: Alignment.centerLeft,
          child: Text(
            "Phone and Email",
            style: TextStyle(
              color: Color(0xFFE9EAEC),
              fontFamily: 'Trap',
              fontSize: 20,
              fontWeight: FontWeight.w800,
              height: 1,
            ),
          ),
        ),
        const SizedBox(
          height: 12.0,
        ),
        MyTextField(
          controller: _phoneController,
          hintText: "Enter phone*",
          obscureText: false,
          keyboardType: TextInputType.phone,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter your phone number';
            }
            // String for phone number validation
            String pattern = r'^(\+?\d{1,4}[\s-])?(?!0+\s+,?$)\d{10}\s*,?$';
            RegExp regex = RegExp(pattern);
            if (!regex.hasMatch(value)) {
              return 'Enter a valid phone number';
            }
            return null;
          },
        ),
        const SizedBox(
          height: 12.0,
        ),
        MyTextField(
          controller: _emailController,
          hintText: "Enter email*",
          obscureText: false,
          keyboardType: TextInputType.emailAddress,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter your email';
            }
            // Regular expression for email validation
            Pattern pattern =
                r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
            RegExp regex = RegExp(pattern.toString());
            if (!regex.hasMatch(value)) {
              return 'Enter a valid email address';
            }
            return null;
          },
        ),
      ],
    );
  }
}

class Pages extends StatelessWidget {
  final Color color;
  final String buttonText;
  final List<Widget> children;
  final PageController pageController;
  final VoidCallback onButtonPressed;
  final GlobalKey<FormState> formKey;

  const Pages(
      {super.key,
      required this.color,
      required this.buttonText,
      required this.children,
      required this.pageController,
      required this.onButtonPressed,
      required this.formKey});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: DecoratedBox(
        decoration: const BoxDecoration(
          image: DecorationImage(
            image: AssetImage(QuikAssetConstants.welcomeBackground),
            fit: BoxFit.cover,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Expanded(
                child: Form(
                  key: formKey,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SvgPicture.asset(
                        QuikAssetConstants.logoSvg,
                        width: 200,
                      ),
                      ...children,
                      const SizedBox(
                        height: 5.0,
                      ),
                      const Align(
                        alignment: Alignment.centerRight,
                        child: Text(
                          "*Required",
                          style: TextStyle(
                            color: Color.fromRGBO(233, 234, 236, 0.50),
                            fontFamily: 'Trap',
                            fontSize: 12,
                            fontStyle: FontStyle.normal,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              Column(
                children: [
                  LongIconButton(
                    text: buttonText,
                    onPressed: onButtonPressed,
                    svgPath: QuikAssetConstants.rightArrowSvg,
                  ),
                  const SizedBox(
                    height: 20.0,
                  ),
                  GestureDetector(
                    onTap: () {
                      context.goNamed(QuikRoutes.signInName);
                    },
                    child: RichText(
                      text: TextSpan(
                        text: "Already have an account?",
                        style: Theme.of(context).textTheme.bodyMedium,
                        children: [
                          TextSpan(
                            text: " Log in ",
                            style: Theme.of(context)
                                .textTheme
                                .bodyMedium
                                ?.copyWith(fontWeight: FontWeight.w700),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

final PageController pageController = PageController();
// final List<Widget> _list = <Widget>[];
