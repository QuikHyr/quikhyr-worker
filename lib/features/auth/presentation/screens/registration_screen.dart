import 'dart:developer';

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_svg/svg.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:quikhyr_worker/common/quik_asset_constants.dart';
import 'package:quikhyr_worker/common/quik_routes.dart';
import 'package:quikhyr_worker/common/widgets/longIconButton.dart';
import 'package:quikhyr_worker/features/auth/presentation/components/my_text_field.dart';
import 'package:quikhyr_worker/models/location_model.dart';
import 'package:quikhyr_worker/models/worker_model.dart';
import '../../blocs/sign_up_bloc/sign_up_bloc.dart';

class RegistrationScreen extends StatefulWidget {
  const RegistrationScreen({Key? key}) : super(key: key);

  @override
  State<RegistrationScreen> createState() => _RegistrationScreenState();
}

class _RegistrationScreenState extends State<RegistrationScreen> {
  final PageController pageController = PageController();
  // int _curr = 0;

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (pageController.page!.toInt() == 0) {
          bool shouldClose = await showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('Confirmation'),
                  content:
                      const Text('Are you sure you want to close the app?'),
                  actions: [
                    TextButton(
                      onPressed: () => GoRouter.of(context).pop(false),
                      child: const Text('No'),
                    ),
                    TextButton(
                      onPressed: () => GoRouter.of(context).pop(true),
                      child: const Text('Yes'),
                    ),
                  ],
                ),
              ) ??
              false;
          return shouldClose;
        } else {
          pageController.previousPage(
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeIn);
          return Future.value(false);
        }
      },
      child: Scaffold(
        body: BlocListener<SignUpBloc, SignUpState>(
          listener: (context, state) {
            log(state.toString());
            if (state is SignUpFailure) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(state.message),
                ),
              );
            }
          },
          child: PageView(
            physics: const NeverScrollableScrollPhysics(),
            controller: pageController,
            children: [
              buildProfileInfo(),
            ],
            // onPageChanged: (num) {
            //   setState(() {
            //     _curr = num;
            //   });
            // },
          ),
        ),
      ),
    );
  }

  final GlobalKey<FormState> _profileInfoFormKey = GlobalKey<FormState>();

  final _dobController = TextEditingController();
  final _pincodeController = TextEditingController();
  final _genderController = TextEditingController();

  Pages buildProfileInfo() {
    return Pages(
      formKey: _profileInfoFormKey,
      pageController: pageController,
      onButtonPressed: () async {
        if (_profileInfoFormKey.currentState!.validate()) {
          // Calculate age based on dob
          int calculateAge(DateTime dob) {
            final now = DateTime.now();
            int age = now.year - dob.year;
            if (now.month < dob.month ||
                (now.month == dob.month && now.day < dob.day)) {
              age--;
            }
            return age;
          }

          int age = calculateAge(DateTime.parse(_dobController.text));

          // WorkerModel user = WorkerModel(
          //   id: '', // This will be generated by Firebase
          //   email: _emailController.text.trim(),
          //   name: _nameController.text.trim(),
          //   phone: "9999999999",
          //   gender: _genderController.text.trim(),
          //   age: age,
          //   available: false,
          //   location: LocationModel(
          //     latitude: 10.353987,
          //     longitude: 76.210751,
          //   ),
          //   pincode: _pincodeController.text.trim(),
          //   fcmToken: "testWorker1fcmToken",
          //   isVerified: false,
          //   isActive: false,
          //   subserviceIds: const ["rcDOmxSMHmeOByqZzIZP"],
          //   serviceIds: const ["nnC5VNxDoGcV1DOBeAz5"],
          // );
          //!!DANGEROUS CODE CAUSE OF NULL CHECK
          SignUpState state = context.read<SignUpBloc>().state;
          if(state is SignUpSuccessWithWorker) {
            WorkerModel worker = state.worker;
            worker = worker.copyWith(
            gender: _genderController.text.trim(),
            age: age,
            pincode: _pincodeController.text.trim(),
            location: LocationModel(
              latitude: 10.353987,
              longitude: 76.210751,
            ),
            fcmToken: "testWorker1fcmToken",
            subserviceIds: const ["rcDOmxSMHmeOByqZzIZP"],
            serviceIds: const ["nnC5VNxDoGcV1DOBeAz5"],
          );
                    context.read<SignUpBloc>().add(RegistrationRequired(
                worker: worker,
              ));
          }
        

        }
      },
      color: Colors.grey,
      buttonText: "Continue",
      children: [
        const SizedBox(
          height: 64.0,
        ),
        const Align(
          alignment: Alignment.centerLeft,
          child: Text(
            "Profile Information",
            style: TextStyle(
              color: Color(0xFFE9EAEC),
              fontFamily: 'Trap',
              fontSize: 20,
              fontWeight: FontWeight.w800,
              height: 1,
            ),
          ),
        ),
        const SizedBox(
          height: 12.0,
        ),
        Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(10),
            color: const Color(0xFF313131),
          ),
          child: DropdownButtonHideUnderline(
            child: DropdownButtonFormField<String>(
              decoration: InputDecoration(
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide:
                      BorderSide(color: Theme.of(context).colorScheme.primary),
                ),
                fillColor: const Color.fromRGBO(51, 153, 204, 0.12),
                filled: true,
                hintText: "Select Gender",
                hintStyle: const TextStyle(
                  color: Color.fromRGBO(233, 234, 236, 0.50),
                  fontFamily: 'Trap',
                  fontSize: 13,
                  fontStyle: FontStyle.normal,
                  fontWeight: FontWeight.w600,
                  height: 1,
                ),
              ),
              style: const TextStyle(
                color: Color(
                    0xFFFAFFFF), // This is the color used when an item is selected
                fontFamily: 'Trap', // This is the font used
              ),
              items: <String>['Male', 'Female', 'Other', 'Rather Not Say']
                  .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(
                    value,
                    style: const TextStyle(
                      color: Color(
                          0xFFFAFFFF), // This is the color used when an item is selected
                      fontFamily: 'Trap', // This is the font used
                      fontSize: 14.0,
                      fontStyle: FontStyle.normal,
                      fontWeight: FontWeight.w700,
                    ),
                  ),
                );
              }).toList(),
              onChanged: (String? newValue) {
                // Update the gender controller with the selected value
                _genderController.text = newValue ?? '';
              },
            ),
          ),
        ),
        const SizedBox(
          height: 12.0,
        ),
        MyTextField(
          controller: _dobController,
          hintText: "Enter date of birth*",
          obscureText: false,
          keyboardType: TextInputType.text,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter your date of birth';
            }
            return null;
          },
          onTap: () async {
            FocusScope.of(context).requestFocus(FocusNode());
            final DateTime? picked = await showDatePicker(
              context: context,
              initialDate: DateTime.now(),
              firstDate: DateTime(1900),
              lastDate: DateTime.now(),
            );
            if (picked != null) {
              _dobController.text = "${picked.toLocal()}".split(' ')[0];
            }
          },
        ),
        const SizedBox(
          height: 12.0,
        ),
        MyTextField(
          controller: _pincodeController,
          hintText: "Enter Pincode*",
          obscureText: false,
          keyboardType: TextInputType.number,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter your pincode';
            } else if (value.length != 6) {
              return 'Pincode must be 6 digits';
            }
            return null;
          },
        ),
      ],
    );
  }
}

class Pages extends StatelessWidget {
  final Color color;
  final String buttonText;
  final List<Widget> children;
  final PageController pageController;
  final VoidCallback onButtonPressed;
  final GlobalKey<FormState> formKey;

  const Pages(
      {super.key,
      required this.color,
      required this.buttonText,
      required this.children,
      required this.pageController,
      required this.onButtonPressed,
      required this.formKey});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: DecoratedBox(
        decoration: const BoxDecoration(
          image: DecorationImage(
            image: AssetImage(QuikAssetConstants.welcomeBackground),
            fit: BoxFit.cover,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Expanded(
                child: Form(
                  key: formKey,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SvgPicture.asset(
                        QuikAssetConstants.logoSvg,
                        width: 200,
                      ),
                      ...children,
                      const SizedBox(
                        height: 5.0,
                      ),
                      const Align(
                        alignment: Alignment.centerRight,
                        child: Text(
                          "*Required",
                          style: TextStyle(
                            color: Color.fromRGBO(233, 234, 236, 0.50),
                            fontFamily: 'Trap',
                            fontSize: 12,
                            fontStyle: FontStyle.normal,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              Column(
                children: [
                  LongIconButton(
                    text: buttonText,
                    onPressed: onButtonPressed,
                    svgPath: QuikAssetConstants.rightArrowSvg,
                  ),
                  const SizedBox(
                    height: 20.0,
                  ),
                  GestureDetector(
                    onTap: () {
                      context.goNamed(QuikRoutes.signInName);
                    },
                    child: RichText(
                      text: TextSpan(
                        text: "Already have an account?",
                        style: Theme.of(context).textTheme.bodyMedium,
                        children: [
                          TextSpan(
                            text: " Log in ",
                            style: Theme.of(context)
                                .textTheme
                                .bodyMedium
                                ?.copyWith(fontWeight: FontWeight.w700),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

final PageController pageController = PageController();
// final List<Widget> _list = <Widget>[];
